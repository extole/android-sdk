plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id "io.gitlab.arturbosch.detekt" version "1.17.1"
    id 'net.linguica.maven-settings' version '0.5'
    id "com.github.evestera.depsize" version "0.2.0"
    id "nebula.optional-base" version "7.0.0"
    id "org.jetbrains.dokka"
    id 'maven-publish'
    id "signing"
    id "com.kezong.fat-aar"
}

def signingKey = findProperty('signingKey')
def signingPassword = findProperty('signingPassword')

detekt {
    buildUponDefaultConfig = true
    allRules = false
    config = files("$projectDir/../config/detekt.yml")
    baseline = file("$projectDir/../config/baseline.xml")

    reports {
        html.enabled = true
        txt.enabled = true
    }
}

android {
    compileSdkVersion 34
    buildToolsVersion '31.0.0'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 53
        versionName "1.0.55"

      testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
      consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.17.1"
    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.6.20")
    //noinspection GradleDependency
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9', optional
    embed('com.google.code.gson:gson:2.9.0')  {
      exclude(group:'androidx.annotation', module:'annotation')
    }
    embed('org.greenrobot:eventbus:3.3.1') {
      exclude(group:'androidx.annotation', module:'annotation')
    }
    embed('com.orhanobut:logger:2.2.0') {
      exclude(group:'androidx.annotation', module:'annotation')
    }

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.assertj:assertj-core:3.21.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
}

fataar {
  transitive = true
}

dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
        configureEach {
            perPackageOption {
                matchingRegex.set(".*\\.impl.*")
                suppress.set(true)
            }
        }
    }
}


configurations.implementation.setCanBeResolved(true)

class Version {

    private int major
    private int minor
    private int patch
    private int code

    Version(int code, String version) {
        this.code = code

        def (major, minor, patch) = version.tokenize('.')
        this.major = major.toInteger()
        this.minor = minor.toInteger()
        this.patch = patch.toInteger()
    }

    @SuppressWarnings("unused")
    void bumpMajor() {
        major += 1
        minor = 0
        patch = 0

        code += 1
    }

    @SuppressWarnings("unused")
    void bumpMinor() {
        minor += 1
        patch = 0

        code += 1
    }

    @SuppressWarnings("unused")
    void bumpPatch() {
        patch += 1
        code += 1
    }

    String getName() { "$major.$minor.$patch" }

    int getCode() { code }
}

tasks.addRule("Pattern: bump<TYPE>Version") { String taskName ->
    if (taskName.matches("bump(Major|Minor|Patch)Version")) {
        task(taskName) {
            doLast {
                String type = (taskName - 'bump' - 'Version')

                println "Bumping ${type.toLowerCase()} version…"

                int oldVersionCode = android.defaultConfig.versionCode
                String oldVersionName = android.defaultConfig.versionName

                version = new Version(oldVersionCode, oldVersionName)
                version."bump$type"()

                String newVersionName = version.getName()
                String newVersionCode = version.getCode()

                println "$oldVersionName ($oldVersionCode) → $newVersionName ($newVersionCode)"

                def updated = buildFile.getText()
                updated = updated.replaceFirst("versionName \"$oldVersionName\"", "versionName \"$newVersionName\"")
                updated = updated.replaceFirst("versionCode $oldVersionCode", "versionCode $newVersionCode")

                buildFile.setText(updated)
            }
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                pom {
                    from components.release

                    groupId = 'com.extole.mobile'
                    artifactId = 'android-sdk'
                    version = android.defaultConfig.versionName
                    name = 'android-sdk'
                    description = 'Extole Android SDK'
                    url = 'https://github.com/extole/android-sdk'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'extole'
                            name = 'Extole'
                            email = 'support@extole.com'
                            organization = 'Extole'
                            organizationUrl = 'https://www.extole.com'
                        }
                    }
                    scm {
                        url = 'https://github.com/extole/android-sdk'
                        connection = 'scm:git://github.com/extole/android-sdk.git'
                        developerConnection = 'scm:git://github.com/extole/android-sdk.git'
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}